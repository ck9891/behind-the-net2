// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url       = "postgresql://postgres.bokgyinuhjslwfwkjmfa:cXpmVXMnoHilxX7L@aws-0-ca-central-1.pooler.supabase.com:6543/postgres?pgbouncer=true&timeout=30000"
  // directUrl = env("DIRECT_URL")
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Player {
  id       Int     @id @default(autoincrement())
  playerId String
  season   String
  first    String
  last     String
  position String
  shoots   String
  team     String
  jersey   Int
  gp       Int
  goals    Int
  assists  Int
  teamId   String?
  // shifts   Shift[]
  // events   Event[]
  // Shift    Shift[]
}

model Shift {
  id               Int     @id @default(autoincrement())
  shiftId          Int
  detailCode       String
  gameId           String
  teamId           String
  period           Int
  startTime        Int
  duration         Int
  endTime          Int
  shiftNumber      Int
  typeCode         String
  eventNumber      Int
  eventDescription String
  // player           Player @relation(fields: [playerId], references: [id])
  playerId         String
  // Player           Player @relation(fields: [playerId], references: [id])
  // Player           Player? @relation(fields: [playerId], references: [id])
  teamId2          String?
}

model Event {
  id                    Int     @id @default(autoincrement())
  yrGm                  String
  eventId               String
  maxRegulationPeriods  Int     @default(3)
  number                Int
  periodType            String  @default("REG")
  minutesElapsed        Int
  secondsElapsed        Int
  minutesRemaining      Int
  secondsRemaining      Int
  situationCode         String
  homeTeamDefendingSide String
  typeCode              String
  zero                  String
  sortOrder             Int
  xCoord                Float
  yCoord                Float
  zoneCode              String
  awayScore             Int
  awaySOG               Int
  homeScore             Int
  homeSOG               Int
  eventOwnerTeamId      String
  shotType              String
  playerId              Int
  shootingPlayerId      Int
  blockingPlayerId      Int
  goalieInNetId         Int
  winningPlayerId       Int
  losingPlayerId        Int
  committedByPlayerId   Int
  drawnByPlayerId       Int
  servedByPlayerId      Int
  hittingPlayerId       Int
  hitteePlayerId        Int
  descKey               String
  duration              Int
  reason                String
  secondaryReason       String
  scoringPlayerId       Int
  scoringPlayerTotal    Int
  assist1PlayerId       Int
  assist1PlayerTotal    Int
  assist2PlayerId       Int
  assist2PlayerTotal    Int
  // player                Player @relation(fields: [playerId], references: [id])
  teamId                String?
}

model EdgePlayerStats {
  id                     Int     @id @default(autoincrement())
  season                 Int
  player                 Int
  first                  String
  last                   String
  pos                    String
  shoots                 String
  team                   String
  jersey                 Int
  gp                     Int
  g                      Int
  a                      Int
  skatingSpeed           Float
  avgSkatingSpeed        Float
  percentileSkatingSpeed Float
  bursts22Plus           Int
  avgBursts22Plus        Float
  percentileBursts22Plus Float
  bursts20To22           Int
  avgBursts20To22        Float
  percentileBursts20To22 Float
  bursts18To20           Int
  avgBursts18To20        Float
  percentileBursts18To20 Float
  oZone                  String
  avgOZone               String
  nZone                  String
  avgNZone               String
  dZone                  String
  avgDZone               String
  shotSpeed              Float
  avgShotSpeed           Float
  percentileShotSpeed    Float
  speed100Plus           Int
  avgSpeed100Plus        Float
  percentileSpeed100Plus Float
  speed90To100           Int
  avgSpeed90To100        Float
  percentileSpeed90To100 Float
  speed80To90            Int
  avgSpeed80To90         Float
  percentileSpeed80To90  Float
  speed70To80            Int
  avgSpeed70To80         Float
  percentileSpeed70To80  Float
  teamId                 String?
}

model Team {
  id           Int    @id @default(autoincrement())
  teamId       String
  season       String
  name         String
  city         String
  division     String
  conference   String
  abbreviation String
  color1       String
  color2       String
  color3       String
  color4       String
}
